#!/bin/bash
### BEGIN INIT INFO
# Provides:          mon
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Prometheus and Grafana Monitoring
# Description:       Local monitoring stack for BrightSign players
### END INIT INFO

# Source function library if it exists
[ -f /etc/init.d/functions ] && . /etc/init.d/functions

SCRIPT_PATH=$(dirname $(realpath $0))
EXTENSION_NAME="mon"

# Service configurations
PROMETHEUS_BIN="${SCRIPT_PATH}/prometheus/prometheus"
PROMETHEUS_CONFIG="${SCRIPT_PATH}/prometheus/prometheus.yml"
PROMETHEUS_DATA="/tmp/prometheus_data"
PROMETHEUS_PIDFILE="/var/run/prometheus.pid"

GRAFANA_BIN="${SCRIPT_PATH}/grafana/bin/grafana-server"
GRAFANA_CONFIG="${SCRIPT_PATH}/grafana/conf/grafana.ini"
GRAFANA_HOME="${SCRIPT_PATH}/grafana"
GRAFANA_PIDFILE="/var/run/grafana.pid"

# Read port configuration from registry with defaults
PROMETHEUS_PORT=$(registry extension ${EXTENSION_NAME}-prometheus-port 2>/dev/null)
if [ -z "${PROMETHEUS_PORT}" ]; then
    PROMETHEUS_PORT=9090  # Default Prometheus port
fi

GRAFANA_PORT=$(registry extension ${EXTENSION_NAME}-grafana-port 2>/dev/null)
if [ -z "${GRAFANA_PORT}" ]; then
    GRAFANA_PORT=3000  # Default Grafana port
fi

NODE_EXPORTER_PORT=$(registry networking prometheus-node-exporter-port 2>/dev/null)
if [ -z "${NODE_EXPORTER_PORT}" ]; then
    NODE_EXPORTER_PORT=9100  # Default Node Exporter port
fi

# Writable directories for data and logs
DATA_BASE_DIR="/tmp"
if [ -d "/var/log" ] && [ -w "/var/log" ]; then
    LOG_DIR="/var/log"
else
    LOG_DIR="/tmp"
fi

# Prometheus settings
PROMETHEUS_LOG="${LOG_DIR}/prometheus.log"

# Grafana settings 
GRAFANA_DATA_DIR="${DATA_BASE_DIR}/grafana_data"
GRAFANA_LOG_DIR="${DATA_BASE_DIR}/grafana_logs"
GRAFANA_LOG="${GRAFANA_LOG_DIR}/grafana.log"

# Function to generate Prometheus configuration with registry values
generate_prometheus_config() {
    local config_file="${PROMETHEUS_CONFIG}"
    echo "Generating Prometheus configuration with registry values..."
    echo "  Node Exporter Port: ${NODE_EXPORTER_PORT}"
    echo "  Grafana Port: ${GRAFANA_PORT}"
    
    cat > "${config_file}" << EOF
# Prometheus configuration for BrightSign monitoring
# Generated dynamically from registry settings
global:
  scrape_interval: 15s          # How frequently to scrape targets
  evaluation_interval: 15s      # How frequently to evaluate rules
  scrape_timeout: 10s           # Timeout for scraping

  # Attach labels to all time series
  external_labels:
    monitor: 'brightsign-local'
    player: 'local'

# Alertmanager configuration (optional, disabled by default)
alerting:
  alertmanagers:
    - static_configs:
        - targets: []
          # - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  # - "rules/*.yml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:${PROMETHEUS_PORT}']
        labels:
          instance: 'prometheus-local'

  # BrightSign Node Exporter metrics
  - job_name: 'brightsign-node'
    static_configs:
      - targets: ['localhost:${NODE_EXPORTER_PORT}']
        labels:
          instance: 'brightsign-player'
          player_type: 'local'
    
    # Adjust scrape settings for Node Exporter
    scrape_interval: 30s  # Less frequent for resource conservation
    scrape_timeout: 10s

  # Optional: Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['localhost:${GRAFANA_PORT}']
        labels:
          instance: 'grafana-local'
    metrics_path: '/metrics'
    scrape_interval: 60s  # Less frequent, not critical

# Storage configuration
# Data is stored in the path specified by --storage.tsdb.path
# Retention is controlled by --storage.tsdb.retention.time (default 15d)
EOF
}

# Function to generate Grafana datasource configuration with registry values
generate_grafana_datasource_config() {
    local datasource_dir="${SCRIPT_PATH}/grafana/conf/provisioning/datasources"
    local datasource_file="${datasource_dir}/prometheus.yaml"
    echo "Generating Grafana datasource configuration with registry values..."
    echo "  Prometheus Port: ${PROMETHEUS_PORT}"
    
    # Ensure directory exists
    mkdir -p "${datasource_dir}"
    
    cat > "${datasource_file}" << EOF
# Grafana datasource provisioning configuration
# Generated dynamically from registry settings

apiVersion: 1

# List of datasources to insert/update
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://localhost:${PROMETHEUS_PORT}
    uid: PBFA97CFB590B2093
    isDefault: true
    editable: true
    jsonData:
      timeInterval: "15s"
      queryTimeout: "60s"
      httpMethod: "POST"
EOF
}

# Function to check if auto-start is disabled
check_auto_start() {
    local AUTO_START="true"  # Default to enabled
    local reg_disable=$(registry extension ${EXTENSION_NAME}-disable-auto-start 2>/dev/null)
    if [ -n "${reg_disable}" ]; then
        AUTO_START=${reg_disable}
    fi
    
    if [ "${AUTO_START}" = "false" ]; then
        echo "Auto-start is disabled for ${EXTENSION_NAME} (registry: ${EXTENSION_NAME}-disable-auto-start = false)"
        return 1
    fi
    echo "Auto-start is enabled for ${EXTENSION_NAME} (registry: ${EXTENSION_NAME}-disable-auto-start = ${AUTO_START})"
    return 0
}

# Function to start Prometheus
start_prometheus() {
    local background=$1
    
    # Create data directory if it doesn't exist
    mkdir -p "${PROMETHEUS_DATA}"
    echo "Using Prometheus data directory: ${PROMETHEUS_DATA}"
    echo "Using Prometheus log file: ${PROMETHEUS_LOG}"
    
    # Check if binary exists and is executable
    if [ ! -x "${PROMETHEUS_BIN}" ]; then
        echo "ERROR: Prometheus binary not found or not executable: ${PROMETHEUS_BIN}"
        return 1
    fi
    
    if [ "$background" = "true" ]; then
        echo "Starting Prometheus in background on port ${PROMETHEUS_PORT}..."
        echo "Binary: ${PROMETHEUS_BIN}"
        echo "Config: ${PROMETHEUS_CONFIG}"
        echo "Data: ${PROMETHEUS_DATA}"
        
        # Use nohup instead of start-stop-daemon for better compatibility
        cd "${SCRIPT_PATH}/prometheus"
        nohup "${PROMETHEUS_BIN}" \
            --config.file="${PROMETHEUS_CONFIG}" \
            --storage.tsdb.path="${PROMETHEUS_DATA}" \
            --web.listen-address=":${PROMETHEUS_PORT}" \
            > "${PROMETHEUS_LOG}" 2>&1 &
        echo $! > ${PROMETHEUS_PIDFILE}
    else
        echo "Starting Prometheus in foreground on port ${PROMETHEUS_PORT}..."
        cd "${SCRIPT_PATH}/prometheus"
        "${PROMETHEUS_BIN}" \
            --config.file="${PROMETHEUS_CONFIG}" \
            --storage.tsdb.path="${PROMETHEUS_DATA}" \
            --web.listen-address=":${PROMETHEUS_PORT}"
    fi
}

# Function to start Grafana
start_grafana() {
    local background=$1
    
    # Create writable data directories
    mkdir -p "${GRAFANA_DATA_DIR}"
    mkdir -p "${GRAFANA_LOG_DIR}"
    echo "Using Grafana data directory: ${GRAFANA_DATA_DIR}"
    echo "Using Grafana log directory: ${GRAFANA_LOG_DIR}"
    
    # Check if binary exists and is executable
    if [ ! -x "${GRAFANA_BIN}" ]; then
        echo "ERROR: Grafana binary not found or not executable: ${GRAFANA_BIN}"
        return 1
    fi
    
    # Set Grafana environment variables
    export GF_PATHS_CONFIG="${GRAFANA_CONFIG}"
    export GF_PATHS_DATA="${GRAFANA_DATA_DIR}"
    export GF_PATHS_HOME="${GRAFANA_HOME}"
    export GF_PATHS_LOGS="${GRAFANA_LOG_DIR}"
    export GF_PATHS_PLUGINS="${GRAFANA_HOME}/plugins"
    export GF_PATHS_PROVISIONING="${GRAFANA_HOME}/conf/provisioning"
    
    if [ "$background" = "true" ]; then
        echo "Starting Grafana in background on port ${GRAFANA_PORT}..."
        echo "Binary: ${GRAFANA_BIN}"
        echo "Config: ${GRAFANA_CONFIG}"
        echo "Data: ${GRAFANA_DATA_DIR}"
        echo "Logs: ${GRAFANA_LOG_DIR}"
        
        # Use nohup instead of start-stop-daemon for better compatibility
        cd "${GRAFANA_HOME}"
        nohup "${GRAFANA_BIN}" \
            > "${GRAFANA_LOG}" 2>&1 &
        echo $! > ${GRAFANA_PIDFILE}
    else
        echo "Starting Grafana in foreground on port ${GRAFANA_PORT}..."
        cd "${GRAFANA_HOME}"
        "${GRAFANA_BIN}"
    fi
}

# Function to stop Prometheus
stop_prometheus() {
    if [ -f ${PROMETHEUS_PIDFILE} ]; then
        echo "Stopping Prometheus..."
        PID=$(cat ${PROMETHEUS_PIDFILE})
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            # Wait up to 10 seconds for graceful shutdown
            for i in $(seq 1 10); do
                if ! kill -0 $PID 2>/dev/null; then
                    break
                fi
                sleep 1
            done
            # Force kill if still running
            if kill -0 $PID 2>/dev/null; then
                kill -9 $PID
            fi
        fi
        rm -f ${PROMETHEUS_PIDFILE}
    else
        echo "Prometheus is not running"
    fi
}

# Function to stop Grafana
stop_grafana() {
    if [ -f ${GRAFANA_PIDFILE} ]; then
        echo "Stopping Grafana..."
        PID=$(cat ${GRAFANA_PIDFILE})
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            # Wait up to 10 seconds for graceful shutdown
            for i in $(seq 1 10); do
                if ! kill -0 $PID 2>/dev/null; then
                    break
                fi
                sleep 1
            done
            # Force kill if still running
            if kill -0 $PID 2>/dev/null; then
                kill -9 $PID
            fi
        fi
        rm -f ${GRAFANA_PIDFILE}
    else
        echo "Grafana is not running"
    fi
}

# Main start function
do_start() {
    if ! check_auto_start; then
        return
    fi
    
    echo "Starting monitoring services..."
    echo "Configuration from registry:"
    echo "  Prometheus Port: ${PROMETHEUS_PORT}"
    echo "  Grafana Port: ${GRAFANA_PORT}"
    echo "  Node Exporter Port: ${NODE_EXPORTER_PORT}"
    echo "Log files will be written to:"
    echo "  Prometheus: ${PROMETHEUS_LOG}"
    echo "  Grafana: ${GRAFANA_LOG}"
    echo "Data directories:"
    echo "  Prometheus: ${PROMETHEUS_DATA}"
    echo "  Grafana: ${GRAFANA_DATA_DIR}"
    echo ""
    
    # Generate Prometheus configuration with registry values
    generate_prometheus_config
    
    # Generate Grafana datasource configuration with registry values
    generate_grafana_datasource_config
    
    # Start Prometheus
    start_prometheus true
    sleep 2
    
    # Start Grafana
    start_grafana true
    sleep 2
    
    echo "Monitoring services started"
    echo "Prometheus: http://localhost:${PROMETHEUS_PORT}"
    echo "Grafana: http://localhost:${GRAFANA_PORT}"
}

# Main stop function
do_stop() {
    echo "Stopping monitoring services..."
    stop_grafana
    stop_prometheus
    echo "Monitoring services stopped"
}

# Main run function (foreground)
do_run() {
    echo "Running monitoring services in foreground..."
    echo "Press Ctrl+C to stop"
    echo "Configuration from registry:"
    echo "  Prometheus Port: ${PROMETHEUS_PORT}"
    echo "  Grafana Port: ${GRAFANA_PORT}"
    echo "  Node Exporter Port: ${NODE_EXPORTER_PORT}"
    
    # Generate Prometheus configuration with registry values
    generate_prometheus_config
    
    # Generate Grafana datasource configuration with registry values
    generate_grafana_datasource_config
    
    # Start Prometheus in background even in run mode
    start_prometheus true
    sleep 2
    
    # Run Grafana in foreground (will keep the script running)
    start_grafana false
}

# Status function
do_status() {
    local prometheus_running=false
    local grafana_running=false
    
    echo "=== Service Status ==="
    if [ -f ${PROMETHEUS_PIDFILE} ] && kill -0 $(cat ${PROMETHEUS_PIDFILE}) 2>/dev/null; then
        prometheus_running=true
        echo "Prometheus is running (PID: $(cat ${PROMETHEUS_PIDFILE}), Port: ${PROMETHEUS_PORT})"
    else
        echo "Prometheus is not running (Port: ${PROMETHEUS_PORT})"
    fi
    
    if [ -f ${GRAFANA_PIDFILE} ] && kill -0 $(cat ${GRAFANA_PIDFILE}) 2>/dev/null; then
        grafana_running=true
        echo "Grafana is running (PID: $(cat ${GRAFANA_PIDFILE}), Port: ${GRAFANA_PORT})"
    else
        echo "Grafana is not running (Port: ${GRAFANA_PORT})"
    fi
    
    echo ""
    echo "=== Registry Configuration ==="
    echo "Auto-start: $(registry extension ${EXTENSION_NAME}-disable-auto-start 2>/dev/null || echo 'true (default)')"
    echo "Prometheus Port: ${PROMETHEUS_PORT}"
    echo "Grafana Port: ${GRAFANA_PORT}" 
    echo "Node Exporter Port: ${NODE_EXPORTER_PORT}"
    
    if [ "$prometheus_running" = true ] && [ "$grafana_running" = true ]; then
        return 0
    else
        return 1
    fi
}

# Main case statement
case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart)
        do_stop
        sleep 2
        do_start
        ;;
    run)
        do_run
        ;;
    status)
        do_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|run|status}"
        exit 1
        ;;
esac

exit 0